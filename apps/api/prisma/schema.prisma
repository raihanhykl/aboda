// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]

  @@map("roles")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String?
  first_name    String
  last_name     String?
  phone_number  String?
  image         String?
  is_verified   Int
  is_forgot     Int           @default(0)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  provider      String?
  UserDetails   UserDetail?
  UserAddresses UserAddress[]
  orders        Order[]
  Role          Role?         @relation(fields: [roleId], references: [id])
  roleId        Int?
  AdminDetail   AdminDetail?
  UserVoucher   UserVoucher[]
  Cart          Cart[]

  @@map("users")
}

model UserDetail {
  id              Int     @id @default(autoincrement())
  referral_code   String?
  f_referral_code String?
  User            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique

  @@map("user_details")
}

model AdminDetail {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  User     User    @relation(fields: [userId], references: [id])
  Branch   Branch? @relation(fields: [branchId], references: [id])
  branchId Int?

  @@map("admin_details")
}

model Province {
  id   Int    @id @default(autoincrement())
  name String
  City City[]

  @@map("provinces")
}

model City {
  id         Int       @id @default(autoincrement())
  provinceId Int
  city       String
  Province   Province  @relation(fields: [provinceId], references: [id])
  Address    Address[]

  @@map("cities")
}

model Address {
  id            Int           @id @default(autoincrement())
  cityId        Int
  street        String
  lon           Float
  lat           Float
  City          City          @relation(fields: [cityId], references: [id])
  UserAddresses UserAddress[]
  Branch        Branch[]
  Order         Order[]

  @@map("addresses")
}

model UserAddress {
  id        Int     @id @default(autoincrement())
  userId    Int
  addressId Int
  isActive  Int     @default(1)
  isDefault Int     @default(0)
  user      User    @relation(fields: [userId], references: [id])
  address   Address @relation(fields: [addressId], references: [id])

  @@map("user_addresses")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String    @default("")
  Products Product[]
  isActive Int       @default(1)

  @@map("categories")
}

model Product {
  id            Int            @id @default(autoincrement())
  categoryId    Int
  product_name  String         @unique
  description   String
  price         Int
  weight        Int
  category      Category       @relation(fields: [categoryId], references: [id])
  image         ProductImage[]
  ProductStocks ProductStock[]
  discounts     Discount[]
  orderItems    OrderItem[]
  storeAdminId  Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Int            @default(1)

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Branch {
  id            Int            @id @default(autoincrement())
  branch_name   String
  addressId     Int
  isActive      Int            @default(1)
  address       Address        @relation(fields: [addressId], references: [id])
  ProductStocks ProductStock[]
  AdminDetails  AdminDetail[]
  Discount      Discount[]
  Order         Order[]

  @@map("branches")
}

model ProductStock {
  id           Int            @id @default(autoincrement())
  productId    Int
  branchId     Int
  stock        Int
  Product      Product        @relation(fields: [productId], references: [id])
  Branch       Branch         @relation(fields: [branchId], references: [id])
  StockHistory StockHistory[]
  Cart         Cart[]

  @@map("product_stocks")
}

model Cart {
  id             Int           @id @default(autoincrement())
  quantity       Int?
  ProductStock   ProductStock? @relation(fields: [productStockId], references: [id])
  productStockId Int?
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
}

enum Status {
  in
  out
}

model StockHistory {
  id             Int           @id @default(autoincrement())
  stock_id       Int
  status         Status // 'in' or 'out'
  reference      String
  quantity       Int
  stock_before   Int
  stock_after    Int
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  ProductStock   ProductStock? @relation(fields: [productStockId], references: [id])
  productStockId Int?

  @@map("stock_histories")
}

enum DiscountType {
  percentage
  fixed
  bogo
}

model Discount {
  id             Int          @id @default(autoincrement())
  branchId       Int
  discount_type  DiscountType // ENUM('percentage', 'fixed', 'bogo')
  discount_value Int
  start_date     DateTime
  end_date       DateTime
  isActive       Int          @default(1)
  Product        Product?     @relation(fields: [productId], references: [id])
  productId      Int?
  Branch         Branch       @relation(fields: [branchId], references: [id])
  OrderItem      OrderItem[]

  @@map("discounts")
}

enum VoucherType {
  percentage
  fixed
}

model Voucher {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  type         VoucherType // ENUM('percentage', 'fixed')
  value        Int
  min_purchase Int
  UserVouchers UserVoucher[]
  Order        Order[]

  @@map("vouchers")
}

model UserVoucher {
  id         Int      @id @default(autoincrement())
  userId     Int
  voucherId  Int
  expires_at DateTime
  is_valid   Int
  User       User     @relation(fields: [userId], references: [id])
  Voucher    Voucher  @relation(fields: [voucherId], references: [id])

  @@map("user_vouchers")
}

enum PaymentType {
  bank_transfer
  payment_gateway
}

model Payment {
  id     Int         @id @default(autoincrement())
  type   PaymentType
  orders Order[]

  @@map("payments")
}

model Expedition {
  id               Int                @id @default(autoincrement())
  name             String
  ExpeditionDetail ExpeditionDetail[]

  @@map("expeditions")
}

model ExpeditionDetail {
  id           Int        @id @default(autoincrement())
  expeditionId Int
  name         String
  Expedition   Expedition @relation(fields: [expeditionId], references: [id])

  @@map("expedition_details")
}

enum OrderStatus {
  pending_payment
  awaiting_confirmation
  processing
  shipped
  confirmed
  cancelled
}

model Order {
  id               Int              @id @default(autoincrement())
  discount_voucher Int
  payment_proof    String?
  invoice          String
  total_price      Int
  status           OrderStatus // ENUM('pending', 'paid', 'processed', 'shipped', 'confirmed', 'cancelled')
  midtrans_token   String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  OrderItem        OrderItem[]
  ShippingDetail   ShippingDetail[]
  User             User?            @relation(fields: [userId], references: [id])
  userId           Int?
  Payment          Payment?         @relation(fields: [paymentId], references: [id])
  paymentId        Int?
  Branch           Branch?          @relation(fields: [branchId], references: [id])
  branchId         Int?
  Voucher          Voucher?         @relation(fields: [voucherId], references: [id])
  voucherId        Int?
  Address          Address?         @relation(fields: [addressId], references: [id])
  addressId        Int

  @@map("orders")
}

model ShippingDetail {
  id                Int    @id @default(autoincrement())
  price             Int
  total_weight      Int
  Order             Order? @relation(fields: [orderId], references: [id])
  orderId           Int?
  expedition        String
  expedition_detail String

  @@map("shipping_details")
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  orderId    Int
  productId  Int
  discountId Int?
  quantity   Int
  price      Int
  subtotal   Int
  Order      Order     @relation(fields: [orderId], references: [id])
  Product    Product   @relation(fields: [productId], references: [id])
  Discount   Discount? @relation(fields: [discountId], references: [id])

  @@map("order_items")
}
